{"version":3,"sources":["Barcode.js","App.js","serviceWorker.js","index.js"],"names":["Barcode","canvas","React","createRef","current","this","jsbarcode","props","code","format","updateCanvas","react_default","a","createElement","ref","Component","App","state","window","localStorage","getItem","input","setItem","setState","_this2","onSubmit","e","preventDefault","updateCode","value","type","placeholder","onChange","target","_this3","Fragment","Barcode_Barcode","onClick","style","alignItems","display","flexDirection","justifyContent","minHeight","minWidth","renderBarcode","renderInput","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.348c93b5.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport jsbarcode from 'jsbarcode';\n\nexport default class Barcode extends Component {\n  canvas = React.createRef();\n\n  updateCanvas() {\n    const {current} = this.canvas;\n    if (current) {\n      jsbarcode(current, this.props.code, {\n        format: 'CODE39',\n      });\n    }\n  }\n\n  componentDidMount() {\n    this.updateCanvas();\n  }\n\n  componentDidUpdate() {\n    this.updateCanvas();\n  }\n\n  render() {\n    return <canvas ref={this.canvas} />;\n  }\n}\n","import React, {Component} from 'react';\nimport Barcode from './Barcode';\n\nclass App extends Component {\n  state = {\n    code: window.localStorage.getItem('code'),\n    input: '',\n  };\n\n  updateCode(code) {\n    window.localStorage.setItem('code', code);\n    this.setState({code});\n  }\n\n  renderInput() {\n    return (\n      <form\n        onSubmit={e => {\n          e.preventDefault();\n          this.updateCode(this.state.input);\n        }}>\n        <input\n          value={this.state.input}\n          type=\"number\"\n          placeholder=\"Code\"\n          onChange={e => this.setState({input: e.target.value})}\n        />\n        <button type=\"submit\">Set Code</button>\n        <p>\n          The number below the barcode on the small plastic card you get when\n          you first register with Rainbow Rocket.\n        </p>\n      </form>\n    );\n  }\n\n  renderBarcode() {\n    const {code} = this.state;\n    return (\n      <>\n        <div>\n          <Barcode code={code} />\n        </div>\n        <button type=\"button\" onClick={() => this.updateCode(null)}>\n          Clear code\n        </button>\n      </>\n    );\n  }\n\n  render() {\n    const {code} = this.state;\n    return (\n      <div\n        style={{\n          alignItems: 'center',\n          display: 'flex',\n          flexDirection: 'column',\n          justifyContent: 'center',\n          minHeight: '100vh',\n          minWidth: '100vw',\n        }}>\n        {code ? this.renderBarcode() : this.renderInput()}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}