{"version":3,"sources":["Barcode.js","App.js","serviceWorker.js","index.js"],"names":["Barcode","canvas","React","createRef","current","this","jsbarcode","props","code","format","updateCanvas","react_default","a","createElement","ref","Component","App","state","_this2","setState","window","location","hash","substring","addEventListener","_window$location","origin","pathname","style","fontFamiliy","Barcode_Barcode","alignItems","display","justifyContent","minHeight","minWidth","renderBarcode","renderHelp","Boolean","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8PAGqBA,6MACnBC,OAASC,IAAMC,0FAEA,IACNC,EAAWC,KAAKJ,OAAhBG,QACHA,GACFE,IAAUF,EAASC,KAAKE,MAAMC,KAAM,CAClCC,OAAQ,uDAMZJ,KAAKK,4DAILL,KAAKK,gDAIL,OAAOC,EAAAC,EAAAC,cAAA,UAAQC,IAAKT,KAAKJ,gBArBQc,aCgDtBC,6MA/CbC,MAAQ,CACNT,KAAM,yFAGY,IAAAU,EAAAb,KAClBA,KAAKc,SAAS,CAACX,KAAMY,OAAOC,SAASC,KAAKC,UAAU,KACpDH,OAAOI,iBAAiB,aAAc,kBACpCN,EAAKC,SAAS,CACZX,KAAMY,OAAOC,SAASC,KAAKC,UAAU,4CAK9B,IAAAE,EACgBL,OAAOC,SAA3BK,EADID,EACJC,OAAQC,EADJF,EACIE,SACf,OACEhB,EAAAC,EAAAC,cAAA,mGAEgBF,EAAAC,EAAAC,cAAA,QAAMe,MAAO,CAACC,YAAa,cAA3B,QAAqD,IAFrE,eAGeH,EAASC,EAHxB,iDASY,IACPnB,EAAQH,KAAKY,MAAbT,KACP,OAAOG,EAAAC,EAAAC,cAACiB,EAAD,CAAStB,KAAMA,qCAGf,IACAA,EAAQH,KAAKY,MAAbT,KACP,OACEG,EAAAC,EAAAC,cAAA,OACEe,MAAO,CACLG,WAAY,SACZC,QAAS,OACTC,eAAgB,SAChBC,UAAW,QACXC,SAAU,UAEX3B,EAAOH,KAAK+B,gBAAkB/B,KAAKgC,qBA1C1BtB,aCSEuB,QACW,cAA7BlB,OAAOC,SAASkB,UAEe,UAA7BnB,OAAOC,SAASkB,UAEhBnB,OAAOC,SAASkB,SAASC,MACvB,2DCZNC,IAASC,OAAO/B,EAAAC,EAAAC,cAAC8B,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.16e63c7e.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport jsbarcode from 'jsbarcode';\n\nexport default class Barcode extends Component {\n  canvas = React.createRef();\n\n  updateCanvas() {\n    const {current} = this.canvas;\n    if (current) {\n      jsbarcode(current, this.props.code, {\n        format: 'CODE39',\n      });\n    }\n  }\n\n  componentDidMount() {\n    this.updateCanvas();\n  }\n\n  componentDidUpdate() {\n    this.updateCanvas();\n  }\n\n  render() {\n    return <canvas ref={this.canvas} />;\n  }\n}\n","import React, {Component} from 'react';\nimport Barcode from './Barcode';\n\nclass App extends Component {\n  state = {\n    code: null,\n  };\n\n  componentDidMount() {\n    this.setState({code: window.location.hash.substring(1)});\n    window.addEventListener('hashchange', () =>\n      this.setState({\n        code: window.location.hash.substring(1),\n      }),\n    );\n  }\n\n  renderHelp() {\n    const {origin, pathname} = window.location;\n    return (\n      <p>\n        To render a barcode change the hash of the page. I.e to render a barcode\n        for the value <span style={{fontFamiliy: 'monospace'}}>TEST</span>{' '}\n        navigate to {origin + pathname}\n        #TEST\n      </p>\n    );\n  }\n\n  renderBarcode() {\n    const {code} = this.state;\n    return <Barcode code={code} />;\n  }\n\n  render() {\n    const {code} = this.state;\n    return (\n      <div\n        style={{\n          alignItems: 'center',\n          display: 'flex',\n          justifyContent: 'center',\n          minHeight: '100vh',\n          minWidth: '100vw',\n        }}>\n        {code ? this.renderBarcode() : this.renderHelp()}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}